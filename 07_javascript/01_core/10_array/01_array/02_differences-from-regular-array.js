/* 02_differances-from-regular-array
일반적인 의미의 배열은 각 요소가 동일한 데이터 크기를 가지며 빈틈 없이 연속적으로 이어져 있어
인덱스를 통해 임의의 요소에 한 번에 접근할 수 있는 고속 동작을 장점으로 한다.
하지만 자바스크립트의 배열은 일반적인 배열의 동작을 흉내 낸 특수한 객체로
각각의 메모리 공간이 동일한 크기를 갖지 않아도 되고 연속적으로 이어지 있지 않을 수도 있다. 
*/

/*
Property Descriptor(속성 설명자)란?
Object.getOwnPropertyDescriptors() 메서드는 해당 메서드에 전달 인자로 전달된 객체의
모든 자체 속성들의 속성 설명자(property descriptor)를 반환한다.
-----------------------------------------------------------------------------------------------------
Property Flag(프로퍼티 플래그)란?
객체 프로퍼티는 값(value) 과 함께 플래그(flag)라 불리는 특별한 속성 세 가지를 가짐
- writable:      true이면 값을 수정할 수 있다. 그렇지 않다면 읽기만 가능하다.
- enumerable:   true이면 반복문을 사용해 나열할 수 있다. 그렇지 않다면 반복문을 사용해 나열할 수 없다.
- configurable:   true이면 프로퍼티 삭제나 플래그 수정이 가능하다. 
그렇지 않다면 프로퍼티 삭제와 플래그 수정이 불가능하다.
*/
console.log(Object.getOwnPropertyDescriptors([1, 2, 3]));

// 자바스크립트의 모든 값이 객체의 프로퍼티 값이 될 수 있으므로 모든 값이 배열의 요소가 될 수 있다.
const arr = [
    '홍길동',
    20,
    true,
    null,
    undefined,
    NaN,
    Infinity,
    [],
    {},
    function () {}
];

console.log(arr);

// 인덱스 개념을 흉내낸 문자열을 프로퍼티 키로 가지며,  length 프로퍼티를 추가적으로 갖는 특수한 객체다.
console.log(arr.length);
console.log(Object.getOwnPropertyDescriptors(arr));
// 따라서 원소의 개수가 n개인 배열의 총 프로퍼티 수는 n + 1이다.

/* JS의 배열은 메모리의 연속된 공간에 요소들이 저장되지 않는다는 특징 때문에 장단저이 존재한다.
연속된 공간에 놓여있지 않고 흩어져있을 수 있기 대문에 배열을 통해 요소에 접근할 때 상대적으로 느릴 수 있다.
그러나 요소들이 흩어져있기 때문에 배열의 중간 요소를 삽입, 삭제 하는 경우 일반적인 배열보다 훨씬 빠르게 동작한다.
*/