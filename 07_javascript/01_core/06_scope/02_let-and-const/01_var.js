/* 01. var
ES5까지는 변수를 선언하는 유일한 방법은 var 키워드를 사용하는 것이었는데,
이는 아래와 같은 몇 가지 문제점을 야기했다.*/

// 1. 변수 중복 선언 허용
/* var 키워드로 선언된 변수는 같은 스코프 내에서 중복 선언이 허용된다.
초기화문이 있는 변수 선언문은 JS 엔진에 의해 마치 var 키워드가 없는 것 처럼 동작하게 된다.
*/
var msg = '안녕하세요?';
console.log(msg);

var msg = '반갑습니다!';
console.log(msg);

var msg;            //초기화문이 없는 변수 선언은 무시된다.
console.log(msg);   //undefined가 아닌 기존 '반갑습니다!'가 출력된다.

// 2. 함수 레벨 스코프
/* 함수 외부에서 var 키워드로 선언한 변수는 코드 블록 내에서 선언해도 모두 전역변수가 된다.*/
var i = 0;
for(var i = 0; i < 10; i++) {}
console.log(i);     //10

// 3. 변수 호이스팅(선언문만 호이스팅이 되고, 표현식은 호이스팅이 안된다.)
/* var 키워드로 변수를 선언하면 변수 호이스팅에 의해 변수 선언문이  스코프의 선두로 끌어올려진 것 처럼 동작한다.
즉, 변수 선언문 이전에 참조가 가능하다.
실행 시 오류가 발생하지는 않지만 이는 프로그램의 흐름에 맞지 않고 가독성을 떨어뜨리며 오류를 발생시킬 여지가 있다.
*/
console.log(test);              //에러가 뜬다. var test;를 아래에 작성해주면 에러가 뜨지 않고, undefined가 출력된다.
console.log(typeof test);       //undefined

test = '점심시간이네요~';           // 사실 이 코드는 크게 의미가 없는 코드다.
console.log(test);    
var test;                       // 이 변수 선언문이 런타임 이전에 암묵적으로 실행된 것이다!
console.log(test);  